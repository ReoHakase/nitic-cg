<!DOCTYPE html>
<!-- GitHubリポジトリ: https://github.com/ReoHakase/nitic-cg --><!-- プレビューURL: https://nitic-cg.reoiam.dev/week8/8-5_2 -->
<html>
<head>
  <script src="/lightgl.js" is:inline></script>
  <script id="vertexShader" type="x-shader/x-vertex">
  varying vec3 vNormal;
  varying vec3 vPosition;
  void main() {
    vNormal = normalize(gl_NormalMatrix * gl_Normal);
    vPosition = vec3(gl_ModelViewMatrix * gl_Vertex);
    gl_Position = gl_ModelViewProjectionMatrix * gl_Vertex;
  }
</script>
<script id="fragmentShader" type="x-shader/x-fragment">
  // 頂点シェーダから受け取る変数
  varying vec3 vNormal;         // 頂点の単位法線ベクトル
  varying vec3 vPosition;       // モデルビュー座標系での頂点位置
  
  // 環境光と拡散反射光の設定を外部から受け取る 
  // uniform: 外部からデータを受け取るための変数につける修飾子
  uniform vec3 ambientLight;    // 環境光の設定
  uniform vec3 diffLight;       // 光源の色（拡散反射光）
  uniform float sharpness;

  void main() {
    vec3 lightPosition = vec3(10.0, 10.0, 10.0);    // 光源の位置を指定
    vec3 specLight = vec3(1.0, 1.0, 1.0);           // 鏡面反射光の色（白色）
    vec3 viewPosition = vec3(0.0, 0.0, 10.0);       // 視点の位置

    vec3 lightDir = normalize(lightPosition - vPosition); // 頂点から光源への単位方向ベクトルを計算

    // 拡散反射の強度
    float diff = max(dot(vNormal, lightDir), 0.0);  // 法線ベクトルと光源方向ベクトルの内積を計算
    vec3 diffuse = diffLight * diff;      // 拡散反射の色を計算（光源の色 * 拡散強度）
 
    vec3 viewDir = normalize(viewPosition - vPosition);   // 頂点から視点への単位方向ベクトルを計算

    vec3 reflectDir = reflect(-lightDir, vNormal);  // 光の反射方向を計算

    float spec = pow(max(dot(viewDir, reflectDir), 0.0), sharpness);    // 鏡面反射の強度を計算
    // 視線方向と反射方向の内積を取り、指数関数で調整
    // 数値16.0は輝度を表す（高いほど鋭い反射）
    
    vec3 specular = specLight * spec; // 鏡面反射の色を計算（光源の鏡面反射色 * 強度）
    
    vec3 color = ambientLight + diffuse + specular; // 環境光、拡散反射、鏡面反射を合成
    gl_FragColor = vec4(color, 1.0);      // ピクセルの色を設定（RGBA形式、不透明度1.0）
  }
</script>
  <script type="text/javascript" is:inline>
    let gl;

    function draw() {
      gl = GL.create();
      let angleX = 30, angleY = 20;

      const cube = GL.Mesh.cube({ normals: true });
      const sphere = GL.Mesh.sphere({ normals: true });
      const shader = new GL.Shader('vertexShader', 'fragmentShader');

      gl.onmousemove = function(e) {
        if (e.dragging) {
          angleY += e.deltaX;
          angleX += e.deltaY;
        }
      };

      gl.ondraw = function() {
        gl.clearColor(0.9, 0.9, 0.9, 1.0);
        gl.clear(gl.COLOR_BUFFER_BIT | gl.DEPTH_BUFFER_BIT);
        gl.loadIdentity();
        gl.translate(0, 0, -10);
        gl.rotate(angleX, 1, 0, 0);
        gl.rotate(angleY, 0, 1, 0);

        shader.uniforms({
          ambientLight: [0.2, 0.2, 0.4],
          diffLight: [0.0, 0.6, 0.0],
          sharpness: 4.0
        });

        // 体
        gl.pushMatrix();
        shader.draw(cube);
        gl.popMatrix();

        // 頭
        gl.pushMatrix();
        gl.translate(0, 1, 0);
        gl.scale(1, 1, 1);
        shader.draw(sphere);
        gl.popMatrix();

        // 左腕
        gl.pushMatrix();
        gl.translate(-1.3, 0.1, 0);
        gl.rotate(-30, 0.0, 0.0, 1.0);
        gl.scale(0.3, 0.7, 0.3);
        shader.draw(cube);
        gl.popMatrix();

        // 右腕
        gl.pushMatrix();
        gl.translate(1.3, 0.1, 0);
        gl.rotate(30, 0.0, 0.0, 1.0);
        gl.scale(0.3, 0.7, 0.3);
        shader.draw(cube);
        gl.popMatrix();

        // 左足
        gl.pushMatrix();
        gl.translate(-0.5, -1.5, 0);
        gl.scale(0.4, 0.6, 0.4);
        shader.draw(cube);
        gl.popMatrix();

        // 右足
        gl.pushMatrix();
        gl.translate(0.5, -1.5, 0);
        gl.scale(0.4, 0.6, 0.4);
        shader.draw(cube);
        gl.popMatrix();

        draw_axis();
      };

      gl.fullscreen();
      gl.animate();
      gl.enable(gl.DEPTH_TEST);
    }

    function draw_axis() {
      gl.begin(gl.LINES);
      gl.color(1.0, 0.0, 0.0, 1.0);
      gl.vertex(0.0, 0.0, 0.0); gl.vertex(5.0, 0.0, 0.0);
      gl.end();
      gl.begin(gl.LINES);
      gl.color(0.0, 1.0, 0.0, 1.0);
      gl.vertex(0.0, 0.0, 0.0); gl.vertex(0.0, 5.0, 0.0);
      gl.end();
      gl.begin(gl.LINES);
      gl.color(0.0, 0.5, 1.0, 1.0);
      gl.vertex(0.0, 0.0, 0.0); gl.vertex(0.0, 0.0, 5.0);
      gl.end();
    }
  </script>
</head>
<body onload="draw();">
  <canvas id="glCanvas"></canvas>
</body>
</html>
